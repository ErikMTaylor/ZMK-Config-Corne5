#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&shifted>, <&kp>;
        };
    };

    macros {
        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        LetterLayer {
            bindings = <
&trans  &as Q  &as W  &as E      &as R  &as T        &as Y      &as U  &as I          &as O    &as P     &trans
&trans  &as A  &as S  &as D      &as F  &as G        &as H      &as J  &as K          &as L    &as SEMI  &trans
&trans  &as Z  &as X  &as C      &as V  &as B        &as N      &as M  &as COMMA      &as DOT  &as FSLH  &trans
                      &kp LCTRL  &to 1  &kp SPACE    &kp SPACE  &to 2  &kp BACKSPACE
            >;
        };

        SymbolLayer {
            bindings = <
&trans  &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)    &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp LS(PLUS)  &kp EQUAL     &trans
&trans  &trans        &trans      &trans         &trans        &kp LS(DQT)      &kp LS(LBRC)   &kp LS(RBRC)  &kp LS(LPAR)  &kp LS(RPAR)  &kp LS(PIPE)  &trans
&trans  &trans        &trans      &trans         &trans        &kp SQT          &kp LS(LT)     &kp LS(GT)    &kp LBKT      &kp RBKT      &kp BSLH      &trans
                                  &kp LCTRL      &trans        &kp TAB          &kp BSPC       &trans        &kp ENTER
            >;
        };

        FunctionLayer {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                     &none  &none  &none    &none  &none  &none
            >;
        };
    };
};
